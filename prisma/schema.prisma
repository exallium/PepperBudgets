// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int           @id @default(autoincrement())
  title             String        @unique @db.VarChar(255)
  transaction       Transaction[]
  date_field        String        @db.VarChar(255)
  description_field String        @db.VarChar(255)
  amount_field      String        @db.VarChar(255)

  // Specifies whether or not the CSV file will contain headers. If not, then indicies will need to be used.^
  headers           Boolean       @default(true)

  // Optional field if there are separate fields for withdraw and deposit (like with TD)
  income_field      String?       @db.VarChar(255)

  // Whether to invert the sign on values we read in from the CSV
  invert_values     Boolean       @default(false)
}

model Transaction {
  id          Int       @id @default(autoincrement())
  accountId   Int
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  date        DateTime  @db.Date()
  description String    @db.VarChar(255)
  amount      Float     @db.DoublePrecision
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tag         Tag[]
}

model Category {
  id          Int           @id @default(autoincrement())
  title       String        @unique @db.VarChar(255)
  budget      Float         @db.DoublePrecision
  transaction Transaction[]
  pattern     Pattern[]
}

model Tag {
  id               Int           @id @default(autoincrement())
  title            String        @unique @db.VarChar(255)
  hide_from_budget Boolean       @default(false)
  transaction      Transaction[]
}

model Pattern {
  id         Int      @id @default(autoincrement())
  pattern    String   @unique @db.VarChar(255)
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}
